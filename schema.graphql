schema {
    query: Query
}

union Entity = Organization | Person
union Asset = Organization | MediaChannel

type Person {
    id: ID!
    fist_name: String!
    middle_name: String
    last_name: String!
    education: [Education]
    employment_history: [Employment]
    investments: [Investment]
}

type Article {
    id: ID!
    title: String!
    abstract: String
    summary: String
    retrieved_url: String!
    author: [Person]
    distribution: [Distribution!]
    mentions: [Entity]
}

type Distribution {
    channel: MediaChannel!
    date: Int!
    url: String!
}

type MediaChannel {
    id: ID!
    name: String!
    category: String
    owned_by: [Entity]
    advertisers: [Organization]
}

type Organization {
    id: ID!
    name: String!
    category: String!
    subsidiary_of: Organization
    subsidiaries: [Organization]
    current_employees: [Person]
    former_employees: [Person]
    current_investors: [Person]
    former_investors: [Person]
    current_investments: [Asset]
    former_investments: [Asset]
}

type Education {
    id: ID!
    institution: Organization!
    degree: String
    start_dt: Int
    end_dt: Int
}

type Employment {
    id: ID!
    institution: Organization!
    position: String
    start_dt: Int
    end_dt: Int
}

type Investment {
    id: ID!
    investors: [Entity!]
    assets: [Asset!]
    amount: Float
    start_dt: Int
    end_dt: Int
    notes: String
}

type Position {
    id: ID!
    name: String!
    summary: String!
    associated_beliefs: [Belief]
    similar_positions: [Position]
}

type Belief {
    id: ID!
    name: String!
    summary: String!
    associated_positions: [Position]
    similar_beliefs: [Belief]
}

type ArticleResult {
    success: Boolean!
    errors: [String]
    article: Article
}

type ArticlesResult {
    success: Boolean!
    errors: [String]
    article: [Article]
}

type Query {
    listArticles: ArticlesResult!
    getArticle(id: ID!): ArticleResult!
}
